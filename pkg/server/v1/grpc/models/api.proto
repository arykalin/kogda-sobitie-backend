syntax = "proto3";

package api_pb;
option go_package = "github.com:arykalin/kogda-sobitie-backend/pkg/server";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/api/httpbody.proto";
import "google/protobuf/empty.proto";

message AddressRequest {
  string address = 1;
  uint64 height = 2;
}
message AddressResponse {
  map<string, string> balance = 1;
  string transactions_count = 2;
}
message SubscribeRequest {
  string query = 1;
}
message SubscribeResponse {
  string query = 1;
  google.protobuf.Struct data = 2;
  message Event {
    string key = 1;
    repeated string events = 2;
  }
  repeated Event events = 3;
}

message Event {
  string date = 1;
  string title = 2;
  string duration = 3;
  string link = 4;
  string org = 5;
  string target = 6;
  string where = 7;
  string description = 8;
  string amount = 9;
  string place = 10;
}

message AuthenticateRequest {
  string login = 1;
  string password = 2;
  string id_token = 3;
}

message AuthenticateResponse {
  string token = 1;
}

message CreateEventRequest {
  string date = 1;
  string title = 2;
  string duration = 3;
  string link = 4;
  string org = 5;
  string target = 6;
  string where = 7;
  string description = 8;
  string amount = 9;
  string place = 10;
}

message CreateEventResponse {
  Event event = 1;
}

service ApiService {
  rpc Authenticate (AuthenticateRequest) returns (AuthenticateResponse) {
    option (google.api.http) = {
      post: "/authenticate"
    };
  }
  rpc CreateEvent (CreateEventRequest) returns (CreateEventResponse) {
    option (google.api.http) = {
      post: "/event"
    };
  }
  rpc GetEvent (GetEventRequest) returns (GetEventResponse) {
    option (google.api.http) = {
      get: "/event/{event}"
    };
  }
  rpc DeleteEvent (DeleteEventRequest) returns (DeleteEventResponse) {
    option (google.api.http) = {
      delete: "/event/{event}"
    };
  }
  rpc UpdateEvent (UpdateEventRequest) returns (UpdateEventResponse) {
    option (google.api.http) = {
      put: "/event/{event}"
    };
  }
  rpc ListEvents (ListEventsRequest) returns (ListEventsResponse) {
    option (google.api.http) = {
      get: "/events"
    };
  }
}
